{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/matter-js/build/matter.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/matter-attractors/build/matter-attractors.js","webpack:///./js/bodies/Box.js","webpack:///./js/bodies/Circle.js","webpack:///./js/bodies/Pendulum.js","webpack:///./js/bodies/Car.js","webpack:///./js/bodies/NewtonCradle.js","webpack:///./js/bodies/Ruler.js","webpack:///./js/Stopwatch.js","webpack:///./app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","require","e","f","u","a","Error","code","length","1","_dereq_","Body","Vertices","Vector","Sleeping","Common","Bounds","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","options","defaults","id","nextId","type","label","parts","plugin","angle","vertices","fromPath","position","x","y","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","velocity","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","sprite","xScale","yScale","xOffset","yOffset","lineWidth","body","extend","_initProperties","nextGroup","isNonColliding","nextCategory","set","bounds","positionPrev","clone","anglePrev","parent","rotate","axes","update","area","mass","inertia","defaultFillStyle","choose","fillStyle","strokeStyle","min","max","settings","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setParts","part","_original","inverseMass","inverseInertia","Infinity","moment","fromVertices","centre","translate","autoHull","slice","push","concat","clockwiseSort","hull","hullCentre","total","_totalProperties","delta","sub","rotateAbout","magnitude","Math","abs","translation","add","rotation","point","cos","sin","dx","dy","scale","scaleX","scaleY","totalArea","totalInertia","circleRadius","deltaTime","correction","deltaTimeSquared","pow","velocityPrevX","velocityPrevY","applyForce","offset","properties","mult","div","../core/Common","../core/Sleeping","../geometry/Axes","../geometry/Bounds","../geometry/Vector","../geometry/Vertices","../render/Render","2","Composite","Events","isModified","bodies","constraints","composites","setModified","composite","updateParents","updateChildren","childComposite","objects","trigger","obj","warn","addBody","addConstraint","addComposite","constraint","remove","deep","removeBody","removeConstraint","removeComposite","compositeA","compositeB","indexOf","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","allBodies","allConstraints","allComposites","toString","move","rebase","recursive","../core/Events","./Body","3","World","gravity","../constraint/Constraint","./Composite","4","Contact","vertex","normalImpulse","tangentImpulse","index","5","Detector","SAT","Pair","collisions","broadphasePairs","engine","pairsTable","pairs","table","bodyA","bodyB","canCollide","overlaps","j","partA","k","partB","previousCollision","pairId","pair","isActive","collision","collides","collided","filterA","filterB","./Pair","./SAT","6","Grid","controller","detector","buckets","pairsList","bucketWidth","bucketHeight","grid","forceUpdate","col","row","bucket","bucketId","world","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","floor","column","pairKeys","keys","./Detector","7","timestamp","parentA","parentB","contacts","activeContacts","separation","timeCreated","timeUpdated","supports","support","contactId","contact","depth","setActive","./Contact","8","Pairs","_pairMaxIdleLife","list","collisionStart","collisionActive","collisionEnd","activePairIds","removeOld","pairIndex","indexesToRemove","9","Query","Bodies","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","rectangle","outside","result","contains","../factory/Bodies","10","Resolver","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","preSolvePosition","activeCount","solvePosition","normal","bodyBtoA","contactShare","tempA","_temp","tempB","tempC","tempD","penetration","dot","postSolvePosition","preSolveVelocity","tangent","contactVertex","impulse","cross","solveVelocity","timeScaleSquared","tempE","offsetA","offsetB","velocityPointA","perp","velocityPointB","relativeVelocity","normalVelocity","tangentVelocity","tangentSpeed","tangentVelocityDirection","sign","normalForce","clamp","maxFriction","oAcN","oBcN","share","contactNormalImpulse","contactTangentImpulse","11","overlapAB","overlapBA","minOverlap","canReusePrevCol","axisBodyA","axisBody","axisBodyB","axisNumber","_overlapAxes","reused","overlap","axis","verticesB","_findSupports","verticesA","neg","projectionA","projectionB","Number","MAX_VALUE","_projectToAxis","projection","distance","vertexA","vertexB","nearestDistance","vertexToBody","bodyAPosition","prevIndex","nextIndex","12","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","difference","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","13","MouseConstraint","Mouse","mouse","canvas","element","mouseConstraint","on","_triggerEvents","button","mouseEvents","sourceEvents","mousemove","mousedown","mouseup","clearSourceEvents","../body/Composite","../collision/Detector","../core/Mouse","./Constraint","14","_nextId","_seed","_nowStartTime","Date","argsStart","deepClone","arguments","source","prop","constructor","values","path","begin","end","split","val","shuffle","array","random","temp","choices","isElement","HTMLElement","nodeType","nodeName","isArray","isFunction","isPlainObject","isString","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","Array","info","haystack","needle","map","func","mapped","topologicalSort","graph","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","_requireGlobal","globalName","moduleName","this","self","15","Engine","Render","positionIterations","velocityIterations","constraintIterations","enableSleeping","events","timing","broadphase","renderDefaults","metrics","extended","event","_bodiesApplyGravity","_bodiesUpdate","afterCollisions","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","../body/Body","../body/World","../collision/Grid","../collision/Pairs","../collision/Resolver","./Common","./Events","./Metrics","./Sleeping","16","eventNames","callback","names","off","join","callbacks","newCallbacks","eventClone","17","Matter","Plugin","version","uses","used","use","before","after","./Plugin","18","19","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","pixelRatio","getAttribute","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","width","clientHeight","height","20","_registry","register","isPlugin","registered","pluginVersion","versionParse","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","isFor","parsed","for","versionSatisfies","plugins","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","identifiers","isRange","isNaN","substr","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts","21","Runner","_requestAnimationFrame","_cancelAnimationFrame","_frameTimeout","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","setTimeout","clearTimeout","runner","fps","deltaSampleSize","counterTimestamp","frameCounter","deltaHistory","timePrev","timeScalePrev","frameRequestId","isFixed","enabled","deltaMin","deltaMax","run","time","tick","stop","start","./Engine","22","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","sleepingBody","movingBody","wasSleeping","23","decomp","chamfer","radius","quality","qualityMin","qualityMax","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","theta","PI","xx","yy","toFixed","vertexSets","flagInternal","removeCollinear","minimumArea","isConvex","v","z","concave","makeCCW","removeCollinearPoints","decomposed","quickDecomp","chunk","chunkVertices","pav","pbv","da","magnitudeSquared","db","isInternal","24","Composites","stack","columns","rows","columnGap","rowGap","lastBody","maxHeight","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","./Bodies","25","normalise","gradient","26","boundsA","boundsB","vector","shift","deltaX","deltaY","27","Svg","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","points","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","28","sqrt","output","vectorA","vectorB","cross3","vectorC","scalar","negate","atan2","29","match","parseFloat","mean","average","signed","numerator","denominator","vertice","nextVertice","newVertices","prevVertex","nextVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","radiusVector","midNormal","scaledVertex","precision","alpha","acos","sort","flag","upper","lower","pop","30","RenderPixi","../collision/Contact","../collision/Pair","../collision/Query","../collision/SAT","../constraint/MouseConstraint","../core/Engine","../core/Matter","../core/Metrics","../core/Plugin","../core/Runner","../factory/Composites","../geometry/Svg","../render/RenderPixi","31","background","wireframeBackground","hasBounds","wireframes","showSleeping","showDebug","showBroadphase","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showShadows","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","setPixelRatio","appendChild","loop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","setTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","debug","debugTimestamp","text","round","debugString","font","fillText","beginPath","arc","closePath","moveTo","coils","lineTo","stroke","fill","bodyShadows","distanceX","distanceY","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","bucketKeys","inspector","selected","item","data","setLineDash","selectStart","selectBounds","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","32","renderer","container","spriteContainer","pixiOptions","transparent","view","antialias","backgroundColor","PIXI","WebGLRenderer","Container","sprites","primitives","addChild","children","removeChild","bgSprite","addChildAt","setBackground","isColor","color","Sprite","constraintRender","primitiveId","primitive","Graphics","beginFill","lineStyle","endFill","bodyRender","spriteId","_createBodySprite","_createBodyPrimitive","initialAngle","texturePath","anchor","strokeStyleIndicator","strokeStyleWireframe","strokeStyleWireframeIndicator","Texture","fromImage","g","Function","factory","__WEBPACK_EXTERNAL_MODULE_0__","configurable","MatterAttractors","init","attractors","attractor","forceVector","Attractors","gravityConstant","bToA","distanceSq","Box","w","h","_classCallCheck","Circle","Circle_classCallCheck","Car","Car_classCallCheck","NewtonCradle","NewtonCradle_classCallCheck","Ruler","Ruler_classCallCheck","Stopwatch","displayElement","resultsListElement","Stopwatch_classCallCheck","running","display","results","laps","reset","print","times","step","li","innerText","format","lastChild","clearChildren","calculate","diff","pad0","count","defaultCategory","transparentCategory","objectNumber","currentRow","incline","ground","catapult","cradle","sitePath","location","pathname","ball","wreckingBall","onload","simulatorContainer","getElementById","applyForceButton","stopwatch","querySelector","lap","pause","restart","rulerHorizontal","createRow","insertRow","objectLabel","insertCell","contentEditable","className","innerHTML","removeButton","btn","deleteRow","rowIndex","checked","$","objectColumn","cellIndex","currentObject","objectIndex","xVector","yVector","cells","box"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n* matter-js 0.14.2 by @liabru 2018-06-11\n* http://brm.io/matter-js/\n* License MIT\n*/\n\n/**\n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Matter = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(_dereq_,module,exports){\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Render = _dereq_('../render/Render');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                },\n                lineWidth: 0\n            }\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            value = settings[property];\n\n            if (!settings.hasOwnProperty(property))\n                continue;\n\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                delete part._original;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n     /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n     /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31}],2:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\n* A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\n* It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\n* Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = _dereq_('../core/Events');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Body = _dereq_('./Body');\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {}\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for(var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic add function. Adds one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {} object\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n            Composite.setModified(compositeA, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            Composite.setModified(composite, true, true, false);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n                        .concat(Composite.allConstraints(composite))\n                        .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * Most `Matter.Composite` methods will automatically set this flag to `true` to inform the engine of changes to be handled.\n     * If you need to change it manually, you should use the `Composite.setModified` method.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"./Body\":1}],3:[function(_dereq_,module,exports){\n/**\n* The `Matter.World` module contains methods for creating and manipulating the world composite.\n* A `Matter.World` is a `Matter.Composite` body, which is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`.\n* A `Matter.World` has a few additional properties including `gravity` and `bounds`.\n* It is important to use the functions in the `Matter.Composite` module to modify the world composite, rather than directly modifying its properties.\n* There are also a few methods here that alias those in `Matter.Composite` for easier readability.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class World\n* @extends Composite\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = _dereq_('./Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new world composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @constructor\n     * @param {} options\n     * @return {world} A new world\n     */\n    World.create = function(options) {\n        var composite = Composite.create();\n\n        var defaults = {\n            label: 'World',\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            bounds: { \n                min: { x: -Infinity, y: -Infinity }, \n                max: { x: Infinity, y: Infinity } \n            }\n        };\n        \n        return Common.extend(composite, defaults, options);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The gravity to apply on the world.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n    /**\n     * A `Bounds` object that defines the world bounds for collision detection.\n     *\n     * @property bounds\n     * @type bounds\n     * @default { min: { x: -Infinity, y: -Infinity }, max: { x: Infinity, y: Infinity } }\n     */\n\n    // World is a Composite body\n    // see src/module/Outro.js for these aliases:\n    \n    /**\n     * An alias for Composite.add\n     * @method add\n     * @param {world} world\n     * @param {} object\n     * @return {composite} The original world with the objects added\n     */\n\n    /**\n     * An alias for Composite.remove\n     * @method remove\n     * @param {world} world\n     * @param {} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original world with the objects removed\n     */\n\n    /**\n     * An alias for Composite.clear\n     * @method clear\n     * @param {world} world\n     * @param {boolean} keepStatic\n     */\n\n    /**\n     * An alias for Composite.addComposite\n     * @method addComposite\n     * @param {world} world\n     * @param {composite} composite\n     * @return {world} The original world with the objects from composite added\n     */\n    \n     /**\n      * An alias for Composite.addBody\n      * @method addBody\n      * @param {world} world\n      * @param {body} body\n      * @return {world} The original world with the body added\n      */\n\n     /**\n      * An alias for Composite.addConstraint\n      * @method addConstraint\n      * @param {world} world\n      * @param {constraint} constraint\n      * @return {world} The original world with the constraint added\n      */\n\n})();\n\n},{\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Composite\":2}],4:[function(_dereq_,module,exports){\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            id: Contact.id(vertex),\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n    \n    /**\n     * Generates a contact id.\n     * @method id\n     * @param {vertex} vertex\n     * @return {string} Unique contactID\n     */\n    Contact.id = function(vertex) {\n        return vertex.body.id + '_' + vertex.index;\n    };\n\n})();\n\n},{}],5:[function(_dereq_,module,exports){\n/**\n* The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\n*\n* @class Detector\n*/\n\n// TODO: speculative contacts\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar SAT = _dereq_('./SAT');\nvar Pair = _dereq_('./Pair');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Finds all collisions given a list of pairs.\n     * @method collisions\n     * @param {pair[]} broadphasePairs\n     * @param {engine} engine\n     * @return {array} collisions\n     */\n    Detector.collisions = function(broadphasePairs, engine) {\n        var collisions = [],\n            pairsTable = engine.pairs.table;\n\n        \n        for (var i = 0; i < broadphasePairs.length; i++) {\n            var bodyA = broadphasePairs[i][0], \n                bodyB = broadphasePairs[i][1];\n\n            if ((bodyA.isStatic || bodyA.isSleeping) && (bodyB.isStatic || bodyB.isSleeping))\n                continue;\n            \n            if (!Detector.canCollide(bodyA.collisionFilter, bodyB.collisionFilter))\n                continue;\n\n\n            // mid phase\n            if (Bounds.overlaps(bodyA.bounds, bodyB.bounds)) {\n                for (var j = bodyA.parts.length > 1 ? 1 : 0; j < bodyA.parts.length; j++) {\n                    var partA = bodyA.parts[j];\n\n                    for (var k = bodyB.parts.length > 1 ? 1 : 0; k < bodyB.parts.length; k++) {\n                        var partB = bodyB.parts[k];\n\n                        if ((partA === bodyA && partB === bodyB) || Bounds.overlaps(partA.bounds, partB.bounds)) {\n                            // find a previous collision we could reuse\n                            var pairId = Pair.id(partA, partB),\n                                pair = pairsTable[pairId],\n                                previousCollision;\n\n                            if (pair && pair.isActive) {\n                                previousCollision = pair.collision;\n                            } else {\n                                previousCollision = null;\n                            }\n\n                            // narrow phase\n                            var collision = SAT.collides(partA, partB, previousCollision);\n\n\n                            if (collision.collided) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n})();\n\n},{\"../geometry/Bounds\":26,\"./Pair\":7,\"./SAT\":11}],6:[function(_dereq_,module,exports){\n/**\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = _dereq_('./Pair');\nvar Detector = _dereq_('./Detector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            controller: Grid,\n            detector: Detector.collisions,\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // don't update out of world bodies\n            if (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    /**\n     * Clears the grid.\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        // add new pairs\n        for (var i = 0; i < bucket.length; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                grid.pairs[pairId] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        // update pair counts\n        for (var i = 0; i < bucket.length; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var bodyB = bucket[i],\n                pairId = Pair.id(body, bodyB),\n                pair = grid.pairs[pairId];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pairKeys,\n            pair,\n            pairs = [];\n\n        // grid.pairs is used as a hashmap\n        pairKeys = Common.keys(grid.pairs);\n\n        // iterate over grid.pairs\n        for (var k = 0; k < pairKeys.length; k++) {\n            pair = grid.pairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete grid.pairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n},{\"../core/Common\":14,\"./Detector\":5,\"./Pair\":7}],7:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = _dereq_('./Contact');\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            contacts: {},\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: parentA.inverseMass + parentB.inverseMass,\n            friction: Math.min(parentA.friction, parentB.friction),\n            frictionStatic: Math.max(parentA.frictionStatic, parentB.frictionStatic),\n            restitution: Math.max(parentA.restitution, parentB.restitution),\n            slop: Math.max(parentA.slop, parentB.slop)\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.collision = collision;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = Math.min(parentA.friction, parentB.friction);\n        pair.frictionStatic = Math.max(parentA.frictionStatic, parentB.frictionStatic);\n        pair.restitution = Math.max(parentA.restitution, parentB.restitution);\n        pair.slop = Math.max(parentA.slop, parentB.slop);\n        activeContacts.length = 0;\n        \n        if (collision.collided) {\n            for (var i = 0; i < supports.length; i++) {\n                var support = supports[i],\n                    contactId = Contact.id(support),\n                    contact = contacts[contactId];\n\n                if (contact) {\n                    activeContacts.push(contact);\n                } else {\n                    activeContacts.push(contacts[contactId] = Contact.create(support));\n                }\n            }\n\n            pair.separation = collision.depth;\n            Pair.setActive(pair, true, timestamp);\n        } else {\n            if (pair.isActive === true)\n                Pair.setActive(pair, false, timestamp);\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n},{\"./Contact\":4}],8:[function(_dereq_,module,exports){\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = _dereq_('./Pair');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n    \n    Pairs._pairMaxIdleLife = 1000;\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            activePairIds = [],\n            collision,\n            pairId,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < collisions.length; i++) {\n            collision = collisions[i];\n\n            if (collision.collided) {\n                pairId = Pair.id(collision.bodyA, collision.bodyB);\n                activePairIds.push(pairId);\n\n                pair = pairsTable[pairId];\n                \n                if (pair) {\n                    // pair already exists (but may or may not be active)\n                    if (pair.isActive) {\n                        // pair exists and is active\n                        collisionActive.push(pair);\n                    } else {\n                        // pair exists but was inactive, so a collision has just started again\n                        collisionStart.push(pair);\n                    }\n\n                    // update the pair\n                    Pair.update(pair, collision, timestamp);\n                } else {\n                    // pair did not exist, create a new pair\n                    pair = Pair.create(collision, timestamp);\n                    pairsTable[pairId] = pair;\n\n                    // push the new pair\n                    collisionStart.push(pair);\n                    pairsList.push(pair);\n                }\n            }\n        }\n\n        // deactivate previously active pairs that are now inactive\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            if (pair.isActive && Common.indexOf(activePairIds, pair.id) === -1) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n            }\n        }\n    };\n    \n    /**\n     * Finds and removes pairs that have been inactive for a set amount of time.\n     * @method removeOld\n     * @param {object} pairs\n     * @param {number} timestamp\n     */\n    Pairs.removeOld = function(pairs, timestamp) {\n        var pairsList = pairs.list,\n            pairsTable = pairs.table,\n            indexesToRemove = [],\n            pair,\n            collision,\n            pairIndex,\n            i;\n\n        for (i = 0; i < pairsList.length; i++) {\n            pair = pairsList[i];\n            collision = pair.collision;\n            \n            // never remove sleeping pairs\n            if (collision.bodyA.isSleeping || collision.bodyB.isSleeping) {\n                pair.timeUpdated = timestamp;\n                continue;\n            }\n\n            // if pair is inactive for too long, mark it to be removed\n            if (timestamp - pair.timeUpdated > Pairs._pairMaxIdleLife) {\n                indexesToRemove.push(i);\n            }\n        }\n\n        // remove marked pairs\n        for (i = 0; i < indexesToRemove.length; i++) {\n            pairIndex = indexesToRemove[i] - i;\n            pair = pairsList[pairIndex];\n            delete pairsTable[pair.id];\n            pairsList.splice(pairIndex, 1);\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n},{\"../core/Common\":14,\"./Pair\":7}],9:[function(_dereq_,module,exports){\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar SAT = _dereq_('./SAT');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Bodies = _dereq_('../factory/Bodies');\nvar Vertices = _dereq_('../geometry/Vertices');\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {object[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var bodyA = bodies[i];\n            \n            if (Bounds.overlaps(bodyA.bounds, body.bounds)) {\n                for (var j = bodyA.parts.length === 1 ? 0 : 1; j < bodyA.parts.length; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (Bounds.overlaps(part.bounds, body.bounds)) {\n                        var collision = SAT.collides(part, body);\n\n                        if (collision.collided) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {object[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n},{\"../factory/Bodies\":23,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"./SAT\":11}],10:[function(_dereq_,module,exports){\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount;\n\n        // find total contacts on each body\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            bodyBtoA,\n            contactShare,\n            positionImpulse,\n            contactCount = {},\n            tempA = Vector._temp[0],\n            tempB = Vector._temp[1],\n            tempC = Vector._temp[2],\n            tempD = Vector._temp[3];\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            bodyBtoA = Vector.sub(Vector.add(bodyB.positionImpulse, bodyB.position, tempA), \n                                    Vector.add(bodyA.positionImpulse, \n                                        Vector.sub(bodyB.position, collision.penetration, tempB), tempC), tempD);\n\n            pair.separation = Vector.dot(normal, bodyBtoA);\n        }\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = Resolver._positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (body.positionImpulse.x !== 0 || body.positionImpulse.y !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    Vertices.translate(part.vertices, body.positionImpulse);\n                    Bounds.update(part.bounds, part.vertices, body.velocity);\n                    part.position.x += body.positionImpulse.x;\n                    part.position.y += body.positionImpulse.y;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += body.positionImpulse.x;\n                body.positionPrev.y += body.positionImpulse.y;\n\n                if (Vector.dot(body.positionImpulse, body.velocity) < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    body.positionImpulse.x = 0;\n                    body.positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    body.positionImpulse.x *= Resolver._positionWarming;\n                    body.positionImpulse.y *= Resolver._positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var i,\n            j,\n            pair,\n            contacts,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            tangent,\n            contact,\n            contactVertex,\n            normalImpulse,\n            tangentImpulse,\n            offset,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1];\n        \n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            contacts = pair.activeContacts;\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            tangent = collision.tangent;\n\n            // resolve each contact\n            for (j = 0; j < contacts.length; j++) {\n                contact = contacts[j];\n                contactVertex = contact.vertex;\n                normalImpulse = contact.normalImpulse;\n                tangentImpulse = contact.tangentImpulse;\n\n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                    impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyA.position, tempA);\n                        bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                        bodyA.anglePrev += Vector.cross(offset, impulse) * bodyA.inverseInertia;\n                    }\n\n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        offset = Vector.sub(contactVertex, bodyB.position, tempA);\n                        bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                        bodyB.anglePrev -= Vector.cross(offset, impulse) * bodyB.inverseInertia;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            impulse = Vector._temp[0],\n            tempA = Vector._temp[1],\n            tempB = Vector._temp[2],\n            tempC = Vector._temp[3],\n            tempD = Vector._temp[4],\n            tempE = Vector._temp[5];\n        \n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent,\n                contacts = pair.activeContacts,\n                contactShare = 1 / contacts.length;\n\n            // update body velocities\n            bodyA.velocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyA.velocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyB.velocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyB.velocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (var j = 0; j < contacts.length; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    offsetA = Vector.sub(contactVertex, bodyA.position, tempA),\n                    offsetB = Vector.sub(contactVertex, bodyB.position, tempB),\n                    velocityPointA = Vector.add(bodyA.velocity, Vector.mult(Vector.perp(offsetA), bodyA.angularVelocity), tempC),\n                    velocityPointB = Vector.add(bodyB.velocity, Vector.mult(Vector.perp(offsetB), bodyB.angularVelocity), tempD), \n                    relativeVelocity = Vector.sub(velocityPointA, velocityPointB, tempE),\n                    normalVelocity = Vector.dot(normal, relativeVelocity);\n\n                var tangentVelocity = Vector.dot(tangent, relativeVelocity),\n                    tangentSpeed = Math.abs(tangentVelocity),\n                    tangentVelocityDirection = Common.sign(tangentVelocity);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity,\n                    normalForce = Common.clamp(pair.separation + normalVelocity, 0, 1) * Resolver._frictionNormalMultiplier;\n\n                // coulomb friction\n                var tangentImpulse = tangentVelocity,\n                    maxFriction = Infinity;\n\n                if (tangentSpeed > pair.friction * pair.frictionStatic * normalForce * timeScaleSquared) {\n                    maxFriction = tangentSpeed;\n                    tangentImpulse = Common.clamp(\n                        pair.friction * tangentVelocityDirection * timeScaleSquared,\n                        -maxFriction, maxFriction\n                    );\n                }\n\n                // modify impulses accounting for mass, inertia and offset\n                var oAcN = Vector.cross(offsetA, normal),\n                    oBcN = Vector.cross(offsetB, normal),\n                    share = contactShare / (bodyA.inverseMass + bodyB.inverseMass + bodyA.inverseInertia * oAcN * oAcN  + bodyB.inverseInertia * oBcN * oBcN);\n\n                normalImpulse *= share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < 0 && normalVelocity * normalVelocity > Resolver._restingThresh * timeScaleSquared) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse + normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > Resolver._restingThreshTangent * timeScaleSquared) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse = Common.clamp(contact.tangentImpulse + tangentImpulse, -maxFriction, maxFriction);\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                impulse.x = (normal.x * normalImpulse) + (tangent.x * tangentImpulse);\n                impulse.y = (normal.y * normalImpulse) + (tangent.y * tangentImpulse);\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulse.x * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulse.y * bodyA.inverseMass;\n                    bodyA.anglePrev += Vector.cross(offsetA, impulse) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulse.x * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulse.y * bodyB.inverseMass;\n                    bodyB.anglePrev -= Vector.cross(offsetB, impulse) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],11:[function(_dereq_,module,exports){\n/**\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n*/\n\n// TODO: true circles and curves\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {collision} previousCollision\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB, previousCollision) {\n        var overlapAB,\n            overlapBA, \n            minOverlap,\n            collision,\n            canReusePrevCol = false;\n\n        if (previousCollision) {\n            // estimate total motion\n            var parentA = bodyA.parent,\n                parentB = bodyB.parent,\n                motion = parentA.speed * parentA.speed + parentA.angularSpeed * parentA.angularSpeed\n                       + parentB.speed * parentB.speed + parentB.angularSpeed * parentB.angularSpeed;\n\n            // we may be able to (partially) reuse collision result \n            // but only safe if collision was resting\n            canReusePrevCol = previousCollision && previousCollision.collided && motion < 0.2;\n\n            // reuse collision object\n            collision = previousCollision;\n        } else {\n            collision = { collided: false, bodyA: bodyA, bodyB: bodyB };\n        }\n\n        if (previousCollision && canReusePrevCol) {\n            // if we can reuse the collision result\n            // we only need to test the previously found axis\n            var axisBodyA = collision.axisBody,\n                axisBodyB = axisBodyA === bodyA ? bodyB : bodyA,\n                axes = [axisBodyA.axes[previousCollision.axisNumber]];\n\n            minOverlap = SAT._overlapAxes(axisBodyA.vertices, axisBodyB.vertices, axes);\n            collision.reused = true;\n\n            if (minOverlap.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n        } else {\n            // if we can't reuse a result, perform a full SAT test\n\n            overlapAB = SAT._overlapAxes(bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n            if (overlapAB.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            overlapBA = SAT._overlapAxes(bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n            if (overlapBA.overlap <= 0) {\n                collision.collided = false;\n                return collision;\n            }\n\n            if (overlapAB.overlap < overlapBA.overlap) {\n                minOverlap = overlapAB;\n                collision.axisBody = bodyA;\n            } else {\n                minOverlap = overlapBA;\n                collision.axisBody = bodyB;\n            }\n\n            // important for reuse later\n            collision.axisNumber = minOverlap.axisNumber;\n        }\n\n        collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n        collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n        collision.collided = true;\n        collision.depth = minOverlap.overlap;\n        collision.parentA = collision.bodyA.parent;\n        collision.parentB = collision.bodyB.parent;\n        \n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        // ensure normal is facing away from bodyA\n        if (Vector.dot(minOverlap.axis, Vector.sub(bodyB.position, bodyA.position)) < 0) {\n            collision.normal = {\n                x: minOverlap.axis.x,\n                y: minOverlap.axis.y\n            };\n        } else {\n            collision.normal = {\n                x: -minOverlap.axis.x,\n                y: -minOverlap.axis.y\n            };\n        }\n\n        collision.tangent = Vector.perp(collision.normal);\n\n        collision.penetration = collision.penetration || {};\n        collision.penetration.x = collision.normal.x * collision.depth;\n        collision.penetration.y = collision.normal.y * collision.depth; \n\n        // find support points, there is always either exactly one or two\n        var verticesB = SAT._findSupports(bodyA, bodyB, collision.normal),\n            supports = [];\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, verticesB[0]))\n            supports.push(verticesB[0]);\n\n        if (Vertices.contains(bodyA.vertices, verticesB[1]))\n            supports.push(verticesB[1]);\n\n        // find the supports from bodyA that are inside bodyB\n        if (supports.length < 2) {\n            var verticesA = SAT._findSupports(bodyB, bodyA, Vector.neg(collision.normal));\n                \n            if (Vertices.contains(bodyB.vertices, verticesA[0]))\n                supports.push(verticesA[0]);\n\n            if (supports.length < 2 && Vertices.contains(bodyB.vertices, verticesA[1]))\n                supports.push(verticesA[1]);\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supports.length < 1)\n            supports = [verticesB[0]];\n        \n        collision.supports = supports;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {} verticesA\n     * @param {} verticesB\n     * @param {} axes\n     * @return result\n     */\n    SAT._overlapAxes = function(verticesA, verticesB, axes) {\n        var projectionA = Vector._temp[0], \n            projectionB = Vector._temp[1],\n            result = { overlap: Number.MAX_VALUE },\n            overlap,\n            axis;\n\n        for (var i = 0; i < axes.length; i++) {\n            axis = axes[i];\n\n            SAT._projectToAxis(projectionA, verticesA, axis);\n            SAT._projectToAxis(projectionB, verticesB, axis);\n\n            overlap = Math.min(projectionA.max - projectionB.min, projectionB.max - projectionA.min);\n\n            if (overlap <= 0) {\n                result.overlap = overlap;\n                return result;\n            }\n\n            if (overlap < result.overlap) {\n                result.overlap = overlap;\n                result.axis = axis;\n                result.axisNumber = i;\n            }\n        }\n\n        return result;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    SAT._projectToAxis = function(projection, vertices, axis) {\n        var min = Vector.dot(vertices[0], axis),\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = Vector.dot(vertices[i], axis);\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n    \n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {} bodyA\n     * @param {} bodyB\n     * @param {} normal\n     * @return [vector]\n     */\n    SAT._findSupports = function(bodyA, bodyB, normal) {\n        var nearestDistance = Number.MAX_VALUE,\n            vertexToBody = Vector._temp[0],\n            vertices = bodyB.vertices,\n            bodyAPosition = bodyA.position,\n            distance,\n            vertex,\n            vertexA,\n            vertexB;\n\n        // find closest vertex on bodyB\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            vertexToBody.x = vertex.x - bodyAPosition.x;\n            vertexToBody.y = vertex.y - bodyAPosition.y;\n            distance = -Vector.dot(normal, vertexToBody);\n\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertex;\n            }\n        }\n\n        // find next closest vertex using the two connected to it\n        var prevIndex = vertexA.index - 1 >= 0 ? vertexA.index - 1 : vertices.length - 1;\n        vertex = vertices[prevIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        nearestDistance = -Vector.dot(normal, vertexToBody);\n        vertexB = vertex;\n\n        var nextIndex = (vertexA.index + 1) % vertices.length;\n        vertex = vertices[nextIndex];\n        vertexToBody.x = vertex.x - bodyAPosition.x;\n        vertexToBody.y = vertex.y - bodyAPosition.y;\n        distance = -Vector.dot(normal, vertexToBody);\n        if (distance < nearestDistance) {\n            vertexB = vertex;\n        }\n\n        return [vertexA, vertexB];\n    };\n\n})();\n\n},{\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],12:[function(_dereq_,module,exports){\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Vector = _dereq_('../geometry/Vector');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Axes = _dereq_('../geometry/Axes');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../core/Common\":14,\"../core/Sleeping\":22,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],13:[function(_dereq_,module,exports){\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Sleeping = _dereq_('../core/Sleeping');\nvar Mouse = _dereq_('../core/Mouse');\nvar Events = _dereq_('../core/Events');\nvar Detector = _dereq_('../collision/Detector');\nvar Constraint = _dereq_('./Constraint');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Bounds = _dereq_('../geometry/Bounds');\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Detector\":5,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../core/Sleeping\":22,\"../geometry/Bounds\":26,\"../geometry/Vertices\":29,\"./Constraint\":12}],14:[function(_dereq_,module,exports){\n(function (global){\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n\n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result will be high-resolution including decimal places if available.\n     * @method now\n     * @return {number} the current timestamp\n     */\n    Common.now = function() {\n        if (window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Used to require external libraries outside of the bundle.\n     * It first looks for the `globalName` on the environment's global namespace.\n     * If the global is not found, it will fall back to using the standard `require` using the `moduleName`.\n     * @private\n     * @method _requireGlobal\n     * @param {string} globalName The global module name\n     * @param {string} moduleName The fallback CommonJS module name\n     * @return {} The loaded module\n     */\n    Common._requireGlobal = function(globalName, moduleName) {\n        var obj = (typeof window !== 'undefined' ? window[globalName] : typeof global !== 'undefined' ? global[globalName] : null);\n        return obj || _dereq_(moduleName);\n    };\n})();\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],15:[function(_dereq_,module,exports){\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar World = _dereq_('../body/World');\nvar Sleeping = _dereq_('./Sleeping');\nvar Resolver = _dereq_('../collision/Resolver');\nvar Render = _dereq_('../render/Render');\nvar Pairs = _dereq_('../collision/Pairs');\nvar Metrics = _dereq_('./Metrics');\nvar Grid = _dereq_('../collision/Grid');\nvar Events = _dereq_('./Events');\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('./Common');\nvar Body = _dereq_('../body/Body');\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(element, options) {\n        // options may be passed as the first (and only) argument\n        options = Common.isElement(element) ? options : element;\n        element = Common.isElement(element) ? element : null;\n        options = options || {};\n\n        if (element || options.render) {\n            Common.warn('Engine.create: engine.render is deprecated (see docs)');\n        }\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            timing: {\n                timestamp: 0,\n                timeScale: 1\n            },\n            broadphase: {\n                controller: Grid\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        // @deprecated\n        if (element || engine.render) {\n            var renderDefaults = {\n                element: element,\n                controller: Render\n            };\n            \n            engine.render = Common.extend(renderDefaults, engine.render);\n        }\n\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            engine.render = engine.render.controller.create(engine.render);\n        }\n\n        // @deprecated\n        if (engine.render) {\n            engine.render.engine = engine;\n        }\n\n        engine.world = options.world || World.create(engine.world);\n        engine.pairs = Pairs.create();\n        engine.broadphase = engine.broadphase.controller.create(engine.broadphase);\n        engine.metrics = engine.metrics || { extended: false };\n\n\n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            timing = engine.timing,\n            broadphase = engine.broadphase,\n            broadphasePairs = [],\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get lists of all bodies and constraints, no matter what composites they are in\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n\n        // if sleeping enabled, call the sleeping controller\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // applies gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, world.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // broadphase pass: find potential collision pairs\n        if (broadphase.controller) {\n            // if world is dirty, we must flush the whole grid\n            if (world.isModified)\n                broadphase.controller.clear(broadphase);\n\n            // update the grid buckets based on current bodies\n            broadphase.controller.update(broadphase, allBodies, engine, world.isModified);\n            broadphasePairs = broadphase.pairsList;\n        } else {\n            // if no broadphase set, we just pass all bodies\n            broadphasePairs = allBodies;\n        }\n\n        // clear all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // narrowphase pass: find actual collisions, then create or update collision pairs\n        var collisions = broadphase.detector(broadphasePairs, engine);\n\n        // update collision pairs\n        var pairs = engine.pairs,\n            timestamp = timing.timestamp;\n        Pairs.update(pairs, collisions, timestamp);\n        Pairs.removeOld(pairs, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine including the world, pairs and broadphase.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        var world = engine.world;\n        \n        Pairs.clear(engine.pairs);\n\n        var broadphase = engine.broadphase;\n        if (broadphase.controller) {\n            var bodies = Composite.allBodies(world);\n            broadphase.controller.clear(broadphase);\n            broadphase.controller.update(broadphase, bodies, engine, true);\n        }\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * An alias for `Runner.run`, see `Matter.Runner` for more information.\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {} event An event object\n    * @param {} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An instance of a `Render` controller. The default value is a `Matter.Render` instance created by `Engine.create`.\n     * One may also develop a custom renderer module based on `Matter.Render` and pass an instance of it to `Engine.create` via `options.render`.\n     *\n     * A minimal custom renderer object must define at least three functions: `create`, `clear` and `world` (see `Matter.Render`).\n     * It is also possible to instead pass the _module_ reference via `options.render.controller` and `Engine.create` will instantiate one for you.\n     *\n     * @property render\n     * @type render\n     * @deprecated see Demo.js for an example of creating a renderer\n     * @default a Matter.Render instance\n     */\n\n    /**\n     * An instance of a broadphase controller. The default value is a `Matter.Grid` instance created by `Engine.create`.\n     *\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * A `World` composite object that will contain all simulated bodies and constraints.\n     *\n     * @property world\n     * @type world\n     * @default a Matter.World instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Grid\":6,\"../collision/Pairs\":8,\"../collision/Resolver\":10,\"../constraint/Constraint\":12,\"../render/Render\":31,\"./Common\":14,\"./Events\":16,\"./Metrics\":18,\"./Sleeping\":22}],16:[function(_dereq_,module,exports){\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        if (object.events) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = object.events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n},{\"./Common\":14}],17:[function(_dereq_,module,exports){\n/**\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\n*\n* @class Matter\n*/\n\nvar Matter = {};\n\nmodule.exports = Matter;\n\nvar Plugin = _dereq_('./Plugin');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    /**\n     * The library name.\n     * @property name\n     * @readOnly\n     * @type {String}\n     */\n    Matter.name = 'matter-js';\n\n    /**\n     * The library version.\n     * @property version\n     * @readOnly\n     * @type {String}\n     */\n    Matter.version = '0.14.2';\n\n    /**\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\n     * @property uses\n     * @type {Array}\n     */\n    Matter.uses = [];\n\n    /**\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\n     * @property used\n     * @readOnly\n     * @type {Array}\n     */\n    Matter.used = [];\n\n    /**\n     * Installs the given plugins on the `Matter` namespace.\n     * This is a short-hand for `Plugin.use`, see it for more information.\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\n     * @method use\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\n     */\n    Matter.use = function() {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method before\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.before = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\n     * See also docs for `Common.chain`.\n     * @method after\n     * @param {string} path The path relative to `Matter`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Matter.after = function(path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n    };\n\n})();\n\n},{\"./Common\":14,\"./Plugin\":20}],18:[function(_dereq_,module,exports){\n\n},{\"../body/Composite\":2,\"./Common\":14}],19:[function(_dereq_,module,exports){\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = mouse.element.getAttribute('data-pixel-ratio') || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n},{\"../core/Common\":14}],20:[function(_dereq_,module,exports){\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var identifiers = range.split('-');\n        range = identifiers[0];\n\n        var isRange = isNaN(Number(range[0])),\n            version = isRange ? range.substr(1) : range,\n            parts = Common.map(version.split('.'), function(part) {\n                return Number(part);\n            });\n\n        return {\n            isRange: isRange,\n            version: version,\n            range: range,\n            operator: isRange ? range[0] : '',\n            parts: parts,\n            prerelease: identifiers[1],\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var rangeParsed = Plugin.versionParse(range),\n            rangeParts = rangeParsed.parts,\n            versionParsed = Plugin.versionParse(version),\n            versionParts = versionParsed.parts;\n\n        if (rangeParsed.isRange) {\n            if (rangeParsed.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (rangeParsed.operator === '~') {\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n            }\n\n            if (rangeParsed.operator === '^') {\n                if (rangeParts[0] > 0) {\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n                }\n\n                if (rangeParts[1] > 0) {\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n                }\n\n                return versionParts[2] === rangeParts[2];\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n},{\"./Common\":14}],21:[function(_dereq_,module,exports){\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = _dereq_('./Events');\nvar Engine = _dereq_('./Engine');\nvar Common = _dereq_('./Common');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Triggers `beforeTick`, `tick` and `afterTick` events on the engine.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(engine, 'beforeTick', event); // @deprecated\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n        Events.trigger(engine, 'tick', event); // @deprecated\n\n        // if world has been modified, clear the render scene graph\n        if (engine.world.isModified \n            && engine.render\n            && engine.render.controller\n            && engine.render.controller.clear) {\n            engine.render.controller.clear(engine.render); // @deprecated\n        }\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        // render\n        // @deprecated\n        if (engine.render && engine.render.controller) {\n            Events.trigger(runner, 'beforeRender', event);\n            Events.trigger(engine, 'beforeRender', event); // @deprecated\n\n            engine.render.controller.world(engine.render);\n\n            Events.trigger(runner, 'afterRender', event);\n            Events.trigger(engine, 'afterRender', event); // @deprecated\n        }\n\n        Events.trigger(runner, 'afterTick', event);\n        Events.trigger(engine, 'afterTick', event); // @deprecated\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    * @deprecated\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n},{\"./Common\":14,\"./Engine\":15,\"./Events\":16}],22:[function(_dereq_,module,exports){\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = _dereq_('./Events');\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n},{\"./Events\":16}],23:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = _dereq_('../geometry/Vertices');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Vector = _dereq_('../geometry/Vector');\nvar decomp;\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                                    chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Creates a body using the supplied vertices (or an array containing multiple sets of vertices).\n     * If the vertices are convex, they will pass through as supplied.\n     * Otherwise if the vertices are concave, they will be decomposed if [poly-decomp.js](https://github.com/schteppe/poly-decomp.js) is available.\n     * Note that this process is not guaranteed to support complex sets of vertices (e.g. those with holes may fail).\n     * By default the decomposition will discard collinear edges (to improve performance).\n     * It can also optionally discard any parts that have an area less than `minimumArea`.\n     * If the vertices can not be decomposed, the result will fall back to using the convex hull.\n     * The options parameter is an object that specifies any `Matter.Body` properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param [[vector]] vertexSets\n     * @param {object} [options]\n     * @param {bool} [flagInternal=false]\n     * @param {number} [removeCollinear=0.01]\n     * @param {number} [minimumArea=10]\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea) {\n        if (!decomp) {\n            decomp = Common._requireGlobal('decomp', 'poly-decomp');\n        }\n\n        var body,\n            parts,\n            isConvex,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n\n        if (!decomp) {\n            Common.warn('Bodies.fromVertices: poly-decomp.js required. Could not decompose vertices. Fallback to convex hull.');\n        }\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n\n            if (isConvex || !decomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../core/Common\":14,\"../geometry/Bounds\":26,\"../geometry/Vector\":28,\"../geometry/Vertices\":29}],24:[function(_dereq_,module,exports){\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = _dereq_('../body/Composite');\nvar Constraint = _dereq_('../constraint/Constraint');\nvar Common = _dereq_('../core/Common');\nvar Body = _dereq_('../body/Body');\nvar Bodies = _dereq_('./Bodies');\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * Creates a composite with a Newton's Cradle setup of bodies and constraints.\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                            { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n    \n    /**\n     * Creates a composite with simple car setup of bodies and constraints.\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    /**\n     * Creates a simple soft body like object.\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n})();\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../constraint/Constraint\":12,\"../core/Common\":14,\"./Bodies\":23}],25:[function(_dereq_,module,exports){\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],26:[function(_dereq_,module,exports){\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n},{}],27:[function(_dereq_,module,exports){\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n},{\"../core/Common\":14,\"../geometry/Bounds\":26}],28:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n},{}],29:[function(_dereq_,module,exports){\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = _dereq_('../geometry/Vector');\nvar Common = _dereq_('../core/Common');\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([\\-\\d\\.e]+)[\\s,]*([\\-\\d\\.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        var i;\n        if (scalar) {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x * scalar;\n                vertices[i].y += vector.y * scalar;\n            }\n        } else {\n            for (i = 0; i < vertices.length; i++) {\n                vertices[i].x += vector.x;\n                vertices[i].y += vector.y;\n            }\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                dx = vertice.x - point.x,\n                dy = vertice.y - point.y;\n                \n            vertice.x = point.x + (dx * cos - dy * sin);\n            vertice.y = point.y + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        for (var i = 0; i < vertices.length; i++) {\n            var vertice = vertices[i],\n                nextVertice = vertices[(i + 1) % vertices.length];\n            if ((point.x - vertice.x) * (nextVertice.y - vertice.y) + (point.y - vertice.y) * (vertice.x - nextVertice.x) > 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n},{\"../core/Common\":14,\"../geometry/Vector\":28}],30:[function(_dereq_,module,exports){\nvar Matter = module.exports = _dereq_('../core/Matter');\n\nMatter.Body = _dereq_('../body/Body');\nMatter.Composite = _dereq_('../body/Composite');\nMatter.World = _dereq_('../body/World');\n\nMatter.Contact = _dereq_('../collision/Contact');\nMatter.Detector = _dereq_('../collision/Detector');\nMatter.Grid = _dereq_('../collision/Grid');\nMatter.Pairs = _dereq_('../collision/Pairs');\nMatter.Pair = _dereq_('../collision/Pair');\nMatter.Query = _dereq_('../collision/Query');\nMatter.Resolver = _dereq_('../collision/Resolver');\nMatter.SAT = _dereq_('../collision/SAT');\n\nMatter.Constraint = _dereq_('../constraint/Constraint');\nMatter.MouseConstraint = _dereq_('../constraint/MouseConstraint');\n\nMatter.Common = _dereq_('../core/Common');\nMatter.Engine = _dereq_('../core/Engine');\nMatter.Events = _dereq_('../core/Events');\nMatter.Mouse = _dereq_('../core/Mouse');\nMatter.Runner = _dereq_('../core/Runner');\nMatter.Sleeping = _dereq_('../core/Sleeping');\nMatter.Plugin = _dereq_('../core/Plugin');\n\n\nMatter.Bodies = _dereq_('../factory/Bodies');\nMatter.Composites = _dereq_('../factory/Composites');\n\nMatter.Axes = _dereq_('../geometry/Axes');\nMatter.Bounds = _dereq_('../geometry/Bounds');\nMatter.Svg = _dereq_('../geometry/Svg');\nMatter.Vector = _dereq_('../geometry/Vector');\nMatter.Vertices = _dereq_('../geometry/Vertices');\n\nMatter.Render = _dereq_('../render/Render');\nMatter.RenderPixi = _dereq_('../render/RenderPixi');\n\n// aliases\n\nMatter.World.add = Matter.Composite.add;\nMatter.World.remove = Matter.Composite.remove;\nMatter.World.addComposite = Matter.Composite.addComposite;\nMatter.World.addBody = Matter.Composite.addBody;\nMatter.World.addConstraint = Matter.Composite.addConstraint;\nMatter.World.clear = Matter.Composite.clear;\nMatter.Engine.run = Matter.Runner.run;\n\n},{\"../body/Body\":1,\"../body/Composite\":2,\"../body/World\":3,\"../collision/Contact\":4,\"../collision/Detector\":5,\"../collision/Grid\":6,\"../collision/Pair\":7,\"../collision/Pairs\":8,\"../collision/Query\":9,\"../collision/Resolver\":10,\"../collision/SAT\":11,\"../constraint/Constraint\":12,\"../constraint/MouseConstraint\":13,\"../core/Common\":14,\"../core/Engine\":15,\"../core/Events\":16,\"../core/Matter\":17,\"../core/Metrics\":18,\"../core/Mouse\":19,\"../core/Plugin\":20,\"../core/Runner\":21,\"../core/Sleeping\":22,\"../factory/Bodies\":23,\"../factory/Composites\":24,\"../geometry/Axes\":25,\"../geometry/Bounds\":26,\"../geometry/Svg\":27,\"../geometry/Vector\":28,\"../geometry/Vertices\":29,\"../render/Render\":31,\"../render/RenderPixi\":32}],31:[function(_dereq_,module,exports){\n/**\n* The `Matter.Render` module is a simple HTML5 canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = _dereq_('../core/Common');\nvar Composite = _dereq_('../body/Composite');\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Events = _dereq_('../core/Events');\nvar Grid = _dereq_('../collision/Grid');\nvar Vector = _dereq_('../geometry/Vector');\nvar Mouse = _dereq_('../core/Mouse');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#18181d',\n                wireframeBackground: '#0f0f13',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            Render.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n        render.context.scale(pixelRatio, pixelRatio);\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.showBroadphase && engine.broadphase.controller === Grid)\n            Render.grid(render, engine.broadphase, context);\n\n        if (options.showDebug)\n            Render.debug(render, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method debug\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.debug = function(render, context) {\n        var c = context,\n            engine = render.engine,\n            world = engine.world,\n            metrics = engine.metrics,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            space = \"    \";\n\n        if (engine.timing.timestamp - (render.debugTimestamp || 0) >= 500) {\n            var text = \"\";\n\n            if (metrics.timing) {\n                text += \"fps: \" + Math.round(metrics.timing.fps) + space;\n            }\n\n\n            render.debugString = text;\n            render.debugTimestamp = engine.timing.timestamp;\n        }\n\n        if (render.debugString) {\n            c.font = \"12px Arial\";\n\n            if (options.wireframes) {\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n            } else {\n                c.fillStyle = 'rgba(0,0,0,0.5)';\n            }\n\n            var split = render.debugString.split('\\n');\n\n            for (var i = 0; i < split.length; i++) {\n                c.fillText(split[i], 50, 50 + i * 18);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodyShadows\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyShadows = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            if (body.circleRadius) {\n                c.beginPath();\n                c.arc(body.position.x, body.position.y, body.circleRadius, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                c.beginPath();\n                c.moveTo(body.vertices[0].x, body.vertices[0].y);\n                for (var j = 1; j < body.vertices.length; j++) {\n                    c.lineTo(body.vertices[j].x, body.vertices[j].y);\n                }\n                c.closePath();\n            }\n\n            var distanceX = body.position.x - render.options.width * 0.5,\n                distanceY = body.position.y - render.options.height * 0.2,\n                distance = Math.abs(distanceX) + Math.abs(distanceY);\n\n            c.shadowColor = 'rgba(0,0,0,0.15)';\n            c.shadowOffsetX = 0.05 * distanceX;\n            c.shadowOffsetY = 0.05 * distanceY;\n            c.shadowBlur = 1 + 12 * Math.min(1, distance / 1000);\n\n            c.fill();\n\n            c.shadowColor = null;\n            c.shadowOffsetX = null;\n            c.shadowOffsetY = null;\n            c.shadowBlur = null;\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                                 (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method grid\n     * @param {render} render\n     * @param {grid} grid\n     * @param {RenderingContext} context\n     */\n    Render.grid = function(render, grid, context) {\n        var c = context,\n            options = render.options;\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,180,0,0.1)';\n        } else {\n            c.strokeStyle = 'rgba(255,180,0,0.5)';\n        }\n\n        c.beginPath();\n\n        var bucketKeys = Common.keys(grid.buckets);\n\n        for (var i = 0; i < bucketKeys.length; i++) {\n            var bucketId = bucketKeys[i];\n\n            if (grid.buckets[bucketId].length < 2)\n                continue;\n\n            var region = bucketId.split(/C|R/);\n            c.rect(0.5 + parseInt(region[1], 10) * grid.bucketWidth,\n                    0.5 + parseInt(region[2], 10) * grid.bucketHeight,\n                    grid.bucketWidth,\n                    grid.bucketHeight);\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                             Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                         Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Description\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n})();\n\n},{\"../body/Composite\":2,\"../collision/Grid\":6,\"../core/Common\":14,\"../core/Events\":16,\"../core/Mouse\":19,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}],32:[function(_dereq_,module,exports){\n/**\n* The `Matter.RenderPixi` module is an example renderer using pixi.js.\n* See also `Matter.Render` for a canvas based renderer.\n*\n* @class RenderPixi\n* @deprecated the Matter.RenderPixi module will soon be removed from the Matter.js core.\n* It will likely be moved to its own repository (but maintenance will be limited).\n*/\n\nvar RenderPixi = {};\n\nmodule.exports = RenderPixi;\n\nvar Bounds = _dereq_('../geometry/Bounds');\nvar Composite = _dereq_('../body/Composite');\nvar Common = _dereq_('../core/Common');\nvar Events = _dereq_('../core/Events');\nvar Vector = _dereq_('../geometry/Vector');\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame \n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n    \n    /**\n     * Creates a new Pixi.js WebGL renderer\n     * @method create\n     * @param {object} options\n     * @return {RenderPixi} A new renderer\n     * @deprecated\n     */\n    RenderPixi.create = function(options) {\n        Common.warn('RenderPixi.create: Matter.RenderPixi is deprecated (see docs)');\n\n        var defaults = {\n            controller: RenderPixi,\n            engine: null,\n            element: null,\n            frameRequestId: null,\n            canvas: null,\n            renderer: null,\n            container: null,\n            spriteContainer: null,\n            pixiOptions: null,\n            options: {\n                width: 800,\n                height: 600,\n                background: '#fafafa',\n                wireframeBackground: '#222',\n                hasBounds: false,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showBroadphase: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showShadows: false\n            }\n        };\n\n        var render = Common.extend(defaults, options),\n            transparent = !render.options.wireframes && render.options.background === 'transparent';\n\n        // init pixi\n        render.pixiOptions = render.pixiOptions || {\n            view: render.canvas,\n            transparent: transparent,\n            antialias: true,\n            backgroundColor: options.background\n        };\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.renderer = render.renderer || new PIXI.WebGLRenderer(render.options.width, render.options.height, render.pixiOptions);\n        render.container = render.container || new PIXI.Container();\n        render.spriteContainer = render.spriteContainer || new PIXI.Container();\n        render.canvas = render.canvas || render.renderer.view;\n        render.bounds = render.bounds || { \n            min: {\n                x: 0,\n                y: 0\n            }, \n            max: { \n                x: render.options.width,\n                y: render.options.height\n            }\n        };\n\n        // event listeners\n        Events.on(render.engine, 'beforeUpdate', function() {\n            RenderPixi.clear(render);\n        });\n\n        // caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // use a sprite batch for performance\n        render.container.addChild(render.spriteContainer);\n\n        // insert canvas\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else {\n            Common.warn('No \"render.element\" passed, \"render.canvas\" was not inserted into document.');\n        }\n\n        // prevent menus on canvas\n        render.canvas.oncontextmenu = function() { return false; };\n        render.canvas.onselectstart = function() { return false; };\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            RenderPixi.world(render);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     * @deprecated\n     */\n    RenderPixi.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Clears the scene graph\n     * @method clear\n     * @param {RenderPixi} render\n     * @deprecated\n     */\n    RenderPixi.clear = function(render) {\n        var container = render.container,\n            spriteContainer = render.spriteContainer;\n\n        // clear stage container\n        while (container.children[0]) { \n            container.removeChild(container.children[0]); \n        }\n\n        // clear sprite batch\n        while (spriteContainer.children[0]) { \n            spriteContainer.removeChild(spriteContainer.children[0]); \n        }\n\n        var bgSprite = render.sprites['bg-0'];\n\n        // clear caches\n        render.textures = {};\n        render.sprites = {};\n        render.primitives = {};\n\n        // set background sprite\n        render.sprites['bg-0'] = bgSprite;\n        if (bgSprite)\n            container.addChildAt(bgSprite, 0);\n\n        // add sprite batch back into container\n        render.container.addChild(render.spriteContainer);\n\n        // reset background state\n        render.currentBackground = null;\n\n        // reset bounds transforms\n        container.scale.set(1, 1);\n        container.position.set(0, 0);\n    };\n\n    /**\n     * Sets the background of the canvas \n     * @method setBackground\n     * @param {RenderPixi} render\n     * @param {string} background\n     * @deprecated\n     */\n    RenderPixi.setBackground = function(render, background) {\n        if (render.currentBackground !== background) {\n            var isColor = background.indexOf && background.indexOf('#') !== -1,\n                bgSprite = render.sprites['bg-0'];\n\n            if (isColor) {\n                // if solid background color\n                var color = Common.colorToNumber(background);\n                render.renderer.backgroundColor = color;\n\n                // remove background sprite if existing\n                if (bgSprite)\n                    render.container.removeChild(bgSprite); \n            } else {\n                // initialise background sprite if needed\n                if (!bgSprite) {\n                    var texture = _getTexture(render, background);\n\n                    bgSprite = render.sprites['bg-0'] = new PIXI.Sprite(texture);\n                    bgSprite.position.x = 0;\n                    bgSprite.position.y = 0;\n                    render.container.addChildAt(bgSprite, 0);\n                }\n            }\n\n            render.currentBackground = background;\n        }\n    };\n\n    /**\n     * Description\n     * @method world\n     * @param {engine} engine\n     * @deprecated\n     */\n    RenderPixi.world = function(render) {\n        var engine = render.engine,\n            world = engine.world,\n            renderer = render.renderer,\n            container = render.container,\n            options = render.options,\n            bodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            constraints = [],\n            i;\n\n        if (options.wireframes) {\n            RenderPixi.setBackground(render, options.wireframeBackground);\n        } else {\n            RenderPixi.setBackground(render, options.background);\n        }\n\n        // handle bounds\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        if (options.hasBounds) {\n            // Hide bodies that are not in view\n            for (i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                body.render.sprite.visible = Bounds.overlaps(body.bounds, render.bounds);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            container.scale.set(1 / boundsScaleX, 1 / boundsScaleY);\n            container.position.set(-render.bounds.min.x * (1 / boundsScaleX), -render.bounds.min.y * (1 / boundsScaleY));\n        } else {\n            constraints = allConstraints;\n        }\n\n        for (i = 0; i < bodies.length; i++)\n            RenderPixi.body(render, bodies[i]);\n\n        for (i = 0; i < constraints.length; i++)\n            RenderPixi.constraint(render, constraints[i]);\n\n        renderer.render(container);\n    };\n\n\n    /**\n     * Description\n     * @method constraint\n     * @param {engine} engine\n     * @param {constraint} constraint\n     * @deprecated\n     */\n    RenderPixi.constraint = function(render, constraint) {\n        var engine = render.engine,\n            bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB,\n            container = render.container,\n            constraintRender = constraint.render,\n            primitiveId = 'c-' + constraint.id,\n            primitive = render.primitives[primitiveId];\n\n        // initialise constraint primitive if not existing\n        if (!primitive)\n            primitive = render.primitives[primitiveId] = new PIXI.Graphics();\n\n        // don't render if constraint does not have two end points\n        if (!constraintRender.visible || !constraint.pointA || !constraint.pointB) {\n            primitive.clear();\n            return;\n        }\n\n        // add to scene graph if not already there\n        if (Common.indexOf(container.children, primitive) === -1)\n            container.addChild(primitive);\n\n        // render the constraint on every update, since they can change dynamically\n        primitive.clear();\n        primitive.beginFill(0, 0);\n        primitive.lineStyle(constraintRender.lineWidth, Common.colorToNumber(constraintRender.strokeStyle), 1);\n        \n        if (bodyA) {\n            primitive.moveTo(bodyA.position.x + pointA.x, bodyA.position.y + pointA.y);\n        } else {\n            primitive.moveTo(pointA.x, pointA.y);\n        }\n\n        if (bodyB) {\n            primitive.lineTo(bodyB.position.x + pointB.x, bodyB.position.y + pointB.y);\n        } else {\n            primitive.lineTo(pointB.x, pointB.y);\n        }\n\n        primitive.endFill();\n    };\n    \n    /**\n     * Description\n     * @method body\n     * @param {engine} engine\n     * @param {body} body\n     * @deprecated\n     */\n    RenderPixi.body = function(render, body) {\n        var engine = render.engine,\n            bodyRender = body.render;\n\n        if (!bodyRender.visible)\n            return;\n\n        if (bodyRender.sprite && bodyRender.sprite.texture) {\n            var spriteId = 'b-' + body.id,\n                sprite = render.sprites[spriteId],\n                spriteContainer = render.spriteContainer;\n\n            // initialise body sprite if not existing\n            if (!sprite)\n                sprite = render.sprites[spriteId] = _createBodySprite(render, body);\n\n            // add to scene graph if not already there\n            if (Common.indexOf(spriteContainer.children, sprite) === -1)\n                spriteContainer.addChild(sprite);\n\n            // update body sprite\n            sprite.position.x = body.position.x;\n            sprite.position.y = body.position.y;\n            sprite.rotation = body.angle;\n            sprite.scale.x = bodyRender.sprite.xScale || 1;\n            sprite.scale.y = bodyRender.sprite.yScale || 1;\n        } else {\n            var primitiveId = 'b-' + body.id,\n                primitive = render.primitives[primitiveId],\n                container = render.container;\n\n            // initialise body primitive if not existing\n            if (!primitive) {\n                primitive = render.primitives[primitiveId] = _createBodyPrimitive(render, body);\n                primitive.initialAngle = body.angle;\n            }\n\n            // add to scene graph if not already there\n            if (Common.indexOf(container.children, primitive) === -1)\n                container.addChild(primitive);\n\n            // update body primitive\n            primitive.position.x = body.position.x;\n            primitive.position.y = body.position.y;\n            primitive.rotation = body.angle - primitive.initialAngle;\n        }\n    };\n\n    /**\n     * Creates a body sprite\n     * @method _createBodySprite\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Sprite} sprite\n     * @deprecated\n     */\n    var _createBodySprite = function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    };\n\n    /**\n     * Creates a body primitive\n     * @method _createBodyPrimitive\n     * @private\n     * @param {RenderPixi} render\n     * @param {body} body\n     * @return {PIXI.Graphics} graphics\n     * @deprecated\n     */\n    var _createBodyPrimitive = function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    };\n\n    /**\n     * Gets the requested texture (a PIXI.Texture) via its path\n     * @method _getTexture\n     * @private\n     * @param {RenderPixi} render\n     * @param {string} imagePath\n     * @return {PIXI.Texture} texture\n     * @deprecated\n     */\n    var _getTexture = function(render, imagePath) {\n        var texture = render.textures[imagePath];\n\n        if (!texture)\n            texture = render.textures[imagePath] = PIXI.Texture.fromImage(imagePath);\n\n        return texture;\n    };\n\n})();\n\n},{\"../body/Composite\":2,\"../core/Common\":14,\"../core/Events\":16,\"../geometry/Bounds\":26,\"../geometry/Vector\":28}]},{},[30])(30)\n});\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*!\n * matter-attractors 0.1.6 by Liam Brummitt 2017-05-15\n * https://github.com/liabru/matter-attractors\n * License MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"matter-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"matter-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MatterAttractors\"] = factory(require(\"matter-js\"));\n\telse\n\t\troot[\"MatterAttractors\"] = factory(root[\"Matter\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/libs\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Matter = __webpack_require__(0);\n\n/**\n * An attractors plugin for matter.js.\n * See the readme for usage and examples.\n * @module MatterAttractors\n */\nvar MatterAttractors = {\n  // plugin meta\n  name: 'matter-attractors', // PLUGIN_NAME\n  version: '0.1.4', // PLUGIN_VERSION\n  for: 'matter-js@^0.12.0',\n\n  // installs the plugin where `base` is `Matter`\n  // you should not need to call this directly.\n  install: function install(base) {\n    base.after('Body.create', function () {\n      MatterAttractors.Body.init(this);\n    });\n\n    base.before('Engine.update', function (engine) {\n      MatterAttractors.Engine.update(engine);\n    });\n  },\n\n  Body: {\n    /**\n     * Initialises the `body` to support attractors.\n     * This is called automatically by the plugin.\n     * @function MatterAttractors.Body.init\n     * @param {Matter.Body} body The body to init.\n     * @returns {void} No return value.\n     */\n    init: function init(body) {\n      body.plugin.attractors = body.plugin.attractors || [];\n    }\n  },\n\n  Engine: {\n    /**\n     * Applies all attractors for all bodies in the `engine`.\n     * This is called automatically by the plugin.\n     * @function MatterAttractors.Engine.update\n     * @param {Matter.Engine} engine The engine to update.\n     * @returns {void} No return value.\n     */\n    update: function update(engine) {\n      var world = engine.world,\n          bodies = Matter.Composite.allBodies(world);\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var bodyA = bodies[i],\n            attractors = bodyA.plugin.attractors;\n\n        if (attractors && attractors.length > 0) {\n          for (var j = i + 1; j < bodies.length; j += 1) {\n            var bodyB = bodies[j];\n\n            for (var k = 0; k < attractors.length; k += 1) {\n              var attractor = attractors[k],\n                  forceVector = attractor;\n\n              if (Matter.Common.isFunction(attractor)) {\n                forceVector = attractor(bodyA, bodyB);\n              }\n\n              if (forceVector) {\n                Matter.Body.applyForce(bodyB, bodyB.position, forceVector);\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Defines some useful common attractor functions that can be used \n   * by pushing them to your body's `body.plugin.attractors` array.\n   * @namespace MatterAttractors.Attractors\n   * @property {number} gravityConstant The gravitational constant used by the gravity attractor.\n   */\n  Attractors: {\n    gravityConstant: 0.001,\n\n    /**\n     * An attractor function that applies Newton's law of gravitation.\n     * Use this by pushing `MatterAttractors.Attractors.gravity` to your body's `body.plugin.attractors` array.\n     * The gravitational constant defaults to `0.001` which you can change \n     * at `MatterAttractors.Attractors.gravityConstant`.\n     * @function MatterAttractors.Attractors.gravity\n     * @param {Matter.Body} bodyA The first body.\n     * @param {Matter.Body} bodyB The second body.\n     * @returns {void} No return value.\n     */\n    gravity: function gravity(bodyA, bodyB) {\n      // use Newton's law of gravitation\n      var bToA = Matter.Vector.sub(bodyB.position, bodyA.position),\n          distanceSq = Matter.Vector.magnitudeSquared(bToA) || 0.0001,\n          normal = Matter.Vector.normalise(bToA),\n          magnitude = -MatterAttractors.Attractors.gravityConstant * (bodyA.mass * bodyB.mass / distanceSq),\n          force = Matter.Vector.mult(normal, magnitude);\n\n      // to apply forces to both bodies\n      Matter.Body.applyForce(bodyA, bodyA.position, Matter.Vector.neg(force));\n      Matter.Body.applyForce(bodyB, bodyB.position, force);\n    }\n  }\n};\n\nMatter.Plugin.register(MatterAttractors);\n\nmodule.exports = MatterAttractors;\n\n/**\n * @namespace Matter.Body\n * @see http://brm.io/matter-js/docs/classes/Body.html\n */\n\n/**\n * This plugin adds a new property `body.plugin.attractors` to instances of `Matter.Body`.  \n * This is an array of callback functions that will be called automatically\n * for every pair of bodies, on every engine update.\n * @property {Function[]} body.plugin.attractors\n * @memberof Matter.Body\n */\n\n/**\n * An attractor function calculates the force to be applied\n * to `bodyB`, it should either:\n * - return the force vector to be applied to `bodyB`\n * - or apply the force to the body(s) itself\n * @callback AttractorFunction\n * @param {Matter.Body} bodyA\n * @param {Matter.Body} bodyB\n * @returns {Vector|undefined} a force vector (optional)\n */\n\n/***/ })\n/******/ ]);\n});","var Matter = require('matter-js');\r\n\r\nexport default class Box {\r\n\tconstructor(x, y, w, h, options) { // Used to have the world as a parameter so creating a new object would auto add to engine/world...\r\n\t\tthis.body = Matter.Bodies.rectangle(x, y, w, h, options);\r\n\t\tMatter.Body.setInertia(this.body, Infinity);\r\n\t\tthis.w = w;\r\n\t\tthis.h = h;\r\n\t}\r\n}\r\n\r\n// Based on the vertices, create method that calculates the exact center of the object;\r\n// could be used for auto moving cursor to center of mass for force application\r\n// I think position actually returns this ^","var Matter = require('matter-js');\r\n\r\nexport default class Circle {\r\n\tconstructor(x, y, r, options) {\r\n\t\tthis.body = Matter.Bodies.circle(x, y, r, options);\r\n\t}\r\n}","var Matter = require('matter-js');\r\n\r\nexport default class Pendulum {\r\n\tconstructor(x, y, number, size, length) {\r\n\t\tthis.body = Matter.Composites.newtonsCradle(x, y, number, size, length);\r\n\t}\r\n}\r\n\r\n","var Matter = require('matter-js');\r\n\r\nexport default class Car {\r\n\tconstructor(x, y, w, h, wheelSize) {\r\n\t\tthis.body = Matter.Composites.car(x, y, w, h, wheelSize);\r\n\t}\r\n}","var Matter = require('matter-js');\r\n\r\nexport default class NewtonCradle {\r\n\tconstructor(x, y, n, r, l) {\t\r\n\t    this.body = Matter.Composites.newtonsCradle(x, y, n, r, l);\r\n\t    Matter.Body.translate(this.body.bodies[0], { x: -180, y: -100 });\r\n\t}\r\n}","var Matter = require('matter-js');\r\n\r\nexport default class Ruler {\r\n\tconstructor(x, y, w, h, options) {\r\n\t\tthis.body = Matter.Bodies.rectangle(x, y, w, h, options);\r\n\t\t// this.w = 1020;\r\n\t\t// this.h = 340;\r\n\t}\r\n}","// https://codepen.io/_Billy_Brown/pen/dbJeh\r\nexport default class Stopwatch {\r\n    constructor(displayElement, resultsListElement) {\r\n        this.running = false;\r\n        this.display = displayElement;\r\n        this.results = resultsListElement;\r\n        this.laps = [];\r\n        this.reset();\r\n        this.print(this.times);\r\n    }\r\n    \r\n    reset() {\r\n        this.times = [ 0, 0, 0 ];\r\n        this.print(); // To display the change in the DOM\r\n    }\r\n    \r\n    start() {\r\n        if (!this.time) this.time = performance.now();\r\n        if (!this.running) {\r\n            this.running = true;\r\n            requestAnimationFrame(this.step.bind(this));\r\n        }\r\n    }\r\n    \r\n    lap() {\r\n        let times = this.times;\r\n        let li = document.createElement('li');\r\n        li.innerText = this.format(times);\r\n        this.results.appendChild(li);\r\n    }\r\n    \r\n    pause() {\r\n        this.running = false;\r\n        this.time = null;\r\n    }\r\n\r\n    restart() {\r\n        if (!this.time) this.time = performance.now();\r\n        if (!this.running) {\r\n            this.running = true;\r\n            requestAnimationFrame(this.step.bind(this));\r\n        }\r\n        this.reset();\r\n    }\r\n    \r\n    clear() {\r\n        clearChildren(this.results);\r\n    }\r\n    \r\n    step(timestamp) {\r\n        if (!this.running) return;\r\n        this.calculate(timestamp);\r\n        this.time = timestamp;\r\n        this.print();\r\n        requestAnimationFrame(this.step.bind(this));\r\n    }\r\n    \r\n    calculate(timestamp) {\r\n        var diff = timestamp - this.time;\r\n        // Hundredths of a second are 100 ms\r\n        this.times[2] += diff / 10;\r\n        // Seconds are 100 hundredths of a second\r\n        if (this.times[2] >= 100) {\r\n            this.times[1] += 1;\r\n            this.times[2] -= 100;\r\n        }\r\n        // Minutes are 60 seconds\r\n        if (this.times[1] >= 60) {\r\n            this.times[0] += 1;\r\n            this.times[1] -= 60;\r\n        }\r\n    }\r\n    \r\n    print() {\r\n        this.display.innerText = this.format(this.times);\r\n    }\r\n    \r\n    format(times) {\r\n        return `\\\r\n        ${pad0(times[0], 2)}:\\\r\n        ${pad0(times[1], 2)}:\\\r\n        ${pad0(Math.floor(times[2]), 2)}`;\r\n    }\r\n}\r\n\r\n\r\nexport function pad0(value, count) {\r\n    var result = value.toString();\r\n    for (; result.length < count; --count) {\r\n        result = '0' + result;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function clearChildren(node) {\r\n    while (node.lastChild) {\r\n        node.removeChild(node.lastChild);\r\n    }\r\n}\r\n\r\n// Example stopwatch instantiation\r\n\r\n// let stopwatch = new Stopwatch(\r\n//     document.querySelector('.stopwatch'),\r\n//     document.querySelector('.results'));","var Matter = require('matter-js');\r\n\r\nvar matterAttractors = require('matter-attractors');\r\nMatter.use('matter-attractors');\r\n\r\nimport Box from './js/bodies/Box';\r\nimport Circle from './js/bodies/Circle';\r\nimport Pendulum from './js/bodies/Pendulum';\r\nimport Car from './js/bodies/Car';\r\nimport NewtonCradle from './js/bodies/NewtonCradle';\r\nimport Ruler from './js/bodies/Ruler';\r\nimport Stopwatch from './js/Stopwatch';\r\nimport {pad0, clearChildrne} from './js/Stopwatch';\r\n\r\n// module aliases\r\nconst Engine = Matter.Engine;\r\nconst World = Matter.World;\r\nconst Body = Matter.Body;\r\nconst Events = Matter.Events;\r\nconst Vector = Matter.Vector;\r\nconst Bodies = Matter.Bodies;\r\nconst engine = Engine.create();\r\nconst world = engine.world;\r\nconst Composites = Matter.Composites;\r\nconst Constraint = Matter.Constraint;\r\nconst MouseConstraint = Matter.MouseConstraint;\r\nconst Mouse = Matter.Mouse;\r\nconst Render = Matter.Render;\r\n\r\nvar defaultCategory = 0x0001,\r\n    transparentCategory = 0x0002,\r\n    groundCategory = 0x0003;\r\n\r\nvar objectNumber = 0; // Keeps track of total objects added; used to reference objects\r\n\r\nvar objects = {}; // Stores all objects in simulation\r\n\r\nvar showTrail = false; // When user presses button to make true, a trail will follow objects\r\n\r\nvar currentRow = 0; // Start at row index 0 for ground, then it increments/decrements based on adding/deleting objects\r\n\tconsole.log(\"test\");\r\n    var sitePath = location.pathname.split('/');\r\n    sitePath = sitePath[sitePath.length - 1];\r\n    console.log(sitePath);\r\n    if(sitePath == 'index.html' || sitePath == '') {\r\n        friction();\r\n    }\r\n    else if(sitePath == 'pendulum.html') {\r\n        pendulum();\r\n    }\r\n    else if(sitePath == 'wrecking-ball.html') {\r\n        wreckingBall();\r\n    } \r\n    else if(sitePath == 'momentum.html') {\r\n        momentum();\r\n    } \r\n    else if(sitePath == 'static-equilibrium.html') {\r\n        staticEquilibrium();\r\n    }\r\n    else if(sitePath == 'incline.html') {\r\n        incline();\r\n    }\r\n\r\nwindow.onload = () => {\r\n\tconst simulatorContainer = document.getElementById('physics-simulator');\r\n    const table = document.getElementById(\"table\");\r\n    const applyForceButton = document.getElementById(\"apply-force\");\r\n\r\n    var stopwatch = new Stopwatch(\r\n        document.querySelector('.stopwatch'),\r\n        document.querySelector('.results')\r\n    );\r\n\r\n    document.getElementById(\"start\").addEventListener(\"click\", function() {\r\n        stopwatch.start();\r\n    });\r\n    document.getElementById(\"lap\").addEventListener(\"click\", function() {\r\n        stopwatch.lap();\r\n    });\r\n    document.getElementById(\"pause\").addEventListener(\"click\", function() {\r\n        stopwatch.pause();\r\n    });\r\n    document.getElementById(\"restart\").addEventListener(\"click\", function() {\r\n        stopwatch.restart();\r\n    });\r\n    document.getElementById(\"reset\").addEventListener(\"click\", function() {\r\n        stopwatch.reset();\r\n    });\r\n    document.getElementById(\"clear\").addEventListener(\"click\", function() {\r\n        stopwatch.clear();\r\n    });\r\n\r\n    // Renderer options\r\n    var options = {\r\n        width: 960,\r\n        height: 540,\r\n        showCollisions: false,\r\n        wireframes: false,\r\n        background: './img/grass-field.jpg'\r\n    }\r\n\r\n    var render = Render.create({\r\n        element: simulatorContainer,\r\n        engine: engine,\r\n        options: options\r\n    });\r\n    Render.run(render);\r\n    \r\n    Engine.run(engine);\r\n\r\n    var rulerHorizontal = new Ruler(500, 510, 1020, 1, {\r\n        collisionFilter: {\r\n            category: 0x0002,\r\n            mask: 0x0002\r\n        },\r\n        render: {\r\n            sprite: {\r\n                    texture: './img/rulerHorizontal.png'\r\n                }\r\n            }\r\n        }\r\n    );\r\n    World.add(world, rulerHorizontal.body);\r\n\r\n    var ground = new Box(400, 540, 1200, 60, {\r\n        label: 'ground' + objectNumber, \r\n        friction: 0, \r\n        isStatic: true, \r\n        collisionFilter: {category: transparentCategory}, \r\n        render: {visible: false}, \r\n        restitution: 0 });\r\n    World.add(world, ground.body);\r\n    objects[objectNumber] = ground;\r\n    createRow(ground);\r\n\r\n    var mouse = Mouse.create(render.canvas),\r\n        mouseConstraint = MouseConstraint.create(engine, {\r\n            mouse: mouse,\r\n            constraint: {\r\n                stiffness: .2,\r\n                render: {\r\n                    visible: false\r\n                }\r\n            }\r\n        });\r\n        mouseConstraint.collisionFilter.mask = defaultCategory | transparentCategory;\r\n        mouseConstraint.collisionFilter.category = defaultCategory;\r\n    Mouse.setElement(mouse, simulatorContainer);\r\n    World.add(world, mouseConstraint);\r\n\r\n    Events.on(mouseConstraint, \"mousedown\", () => {\r\n        if(mouseConstraint.body == null) {\r\n            // Do nothing\r\n        }\r\n        else {\r\n            if (mouseConstraint.body.render.lineWidth == 0) {\r\n                mouseConstraint.body.render.lineWidth = 10;\r\n                let objectIndex = parseInt(mouseConstraint.body.id) - 3; // cuz 1st object after ground has id of 4 i guess...\r\n                applyForceButton.addEventListener(\"click\", function(){\r\n                    let xVector = parseFloat(document.getElementById(\"force\").value.split(\" \")[0]);\r\n                    let yVector = parseFloat(document.getElementById(\"force\").value.split(\" \")[1]);\r\n                    yVector *= -1;\r\n                    \r\n                    Body.applyForce(\r\n                        objects[objectIndex].body, \r\n                        Vector.create(objects[objectIndex].body.position.x, objects[objectIndex].body.position.y), \r\n                        Vector.create(xVector, yVector)\r\n                    );\r\n                });            \r\n            }\r\n            // else {\r\n            //     mouseConstraint.body.render.lineWidth = 0;\r\n            //     }\r\n           }\r\n    });\r\n\r\n    // Physics Constants\r\n    var constantsTable = document.getElementById('physics-constants-table');\r\n    constantsTable.rows[1].cells[1].innerHTML = world.gravity.y;\r\n\r\n    $('#physics-constants-table tr td').on(\"DOMSubtreeModified\", function(){\r\n        var physicsConstant = this.cellIndex; // which column\r\n        // if((isNaN(this.innerHTML) || this.innerHTML == '' || this.innerHTML > 100) || this.innerHTML < 0) {\r\n        //     return;\r\n        // }\r\n        if(physicsConstant == 1) { // Gravity\r\n            world.gravity.y = this.innerHTML;\r\n        }\r\n        else if(objectNumber == 1) { // Air Resistance\r\n            for(let i=0; i<objects.length; i++) {\r\n                objects[this.parentNode.id].body.frictionAir = this.innerHTML;\r\n            }\r\n        }\r\n    });\r\n\r\n    function createRow(object) {\r\n        var row = table.insertRow(currentRow);\r\n        currentRow++;\r\n        row.id = objectNumber;\r\n\r\n        var objectLabel = row.insertCell(0);\r\n        objectLabel.id = objectNumber;\r\n        objectLabel.contentEditable = 'true';\r\n        objectLabel.className += 'pt-3-half';\r\n        objectLabel.innerHTML = object.body.label;\r\n\r\n        var mass = row.insertCell(1);\r\n        mass.id = objectNumber;\r\n        mass.contentEditable = 'true';\r\n        mass.className += 'pt-3-half';\r\n        mass.innerHTML = object.body.mass;\r\n\r\n        var position = row.insertCell(2);\r\n        position.id = objectNumber;\r\n        position.contentEditable = 'true';\r\n        position.className += 'pt-3-half';\r\n        position.innerHTML = object.body.position.x + ' ' + object.body.position.y;\r\n\r\n        var velocity = row.insertCell(3);\r\n        velocity.id = objectNumber;\r\n        velocity.contentEditable = 'true';\r\n        velocity.className += 'pt-3-half';\r\n        velocity.innerHTML = object.body.velocity.x + ' ' + object.body.velocity.y;\r\n\r\n        var torque = row.insertCell(4);\r\n        torque.id = objectNumber;\r\n        torque.contentEditable = 'true';\r\n        torque.className += 'pt-3-half';\r\n        torque.innerHTML = object.body.torque;\r\n\r\n        var angularVelocity = row.insertCell(5);\r\n        angularVelocity.id = objectNumber;\r\n        angularVelocity.contentEditable = 'true';\r\n        angularVelocity.className += 'pt-3-half';\r\n        angularVelocity.innerHTML = object.body.angularVelocity;\r\n\r\n        var inertia = row.insertCell(6);\r\n        inertia.id = objectNumber;\r\n        inertia.contentEditable = 'true';\r\n        inertia.className += 'pt-3-half';\r\n        inertia.innerHTML = object.body.inertia.toFixed(4);\r\n\r\n        var density = row.insertCell(7);\r\n        density.id = objectNumber;\r\n        density.contentEditable = 'true';\r\n        density.className += 'pt-3-half';\r\n        density.innerHTML = object.body.density.toFixed(4);\r\n\r\n        var restitution = row.insertCell(8);\r\n        restitution.id = objectNumber;\r\n        restitution.contentEditable = 'true';\r\n        restitution.className += 'pt-3-half';\r\n        restitution.innerHTML = object.body.restitution;\r\n\r\n        var friction = row.insertCell(9);\r\n        friction.id = objectNumber;\r\n        friction.contentEditable = 'true';\r\n        friction.className += 'pt-3-half';\r\n        friction.innerHTML = object.body.friction;\r\n\r\n        var frictionStatic = row.insertCell(10);\r\n        frictionStatic.id = objectNumber;\r\n        frictionStatic.contentEditable = 'true';\r\n        frictionStatic.className += 'pt-3-half';\r\n        frictionStatic.innerHTML = object.body.frictionStatic;\r\n\r\n        var removeButton = row.insertCell(11);\r\n        var btn = document.createElement(\"BUTTON\");\r\n        btn.innerHTML = 'Remove';\r\n        btn.className += 'btn btn-danger btn-rounded btn-sm my-0';\r\n        btn.value = objectNumber; // Used to locate the object to remove from world\r\n        removeButton.appendChild(btn);\r\n        btn.addEventListener(\"click\", function(){\r\n            World.remove(world, objects[this.value].body);\r\n            table.deleteRow(this.parentNode.parentNode.rowIndex-1);\r\n            currentRow--;\r\n        });\r\n\r\n        Events.on(engine, \"afterUpdate\", function(){\r\n            if (document.getElementById(\"object-path-checkbox\").checked) {\r\n                showTrail = true;\r\n            }\r\n            else {\r\n                showTrail = false;\r\n            }\r\n            if(showTrail) {\r\n                // render.context.fillRect(objects[objectNumber].body.position.x, objects[objectNumber].body.position.y, 5, 5);\r\n            }\r\n        })\r\n\r\n        objectNumber++;\r\n\r\n        $('#table tr td').on(\"DOMSubtreeModified\", function(){\r\n            var objectColumn = this.cellIndex;\r\n            var currentObject = this.id; // id of <td> is the key of the objected being editted in objects\r\n            \r\n            // Need if statement to avoid invalid inputs - prev statemetn wasn't working...\r\n\r\n            if(objectColumn == 0) {\r\n                objects[currentObject].body.label = this.innerHTML;\r\n            }\r\n            else if(objectColumn == 1) {\r\n                Body.setMass(objects[currentObject].body, this.innerHTML);\r\n            }\r\n            else if(objectColumn == 2) {\r\n                Body.setPosition(objects[currentObject].body, Vector.create(\r\n                    parseInt(this.innerHTML.split(\" \")[0]),\r\n                    540 - parseInt(this.innerHTML.split(\" \")[1])\r\n                ));\r\n            }\r\n            else if(objectColumn == 3) {\r\n                Body.setVelocity(objects[currentObject].body, Vector.create(\r\n                    parseInt(this.innerHTML.split(\" \")[0]),\r\n                    parseInt(this.innerHTML.split(\" \")[1])\r\n                ));\r\n            }\r\n            else if(objectColumn == 4) {\r\n                objects[currentObject].body.torque = this.innerHTML;\r\n            }\r\n            else if(objectColumn == 5) {\r\n                Body.setAngularVelocity(objects[currentObject].body, this.innerHTML);\r\n            }\r\n            else if(objectColumn == 6) {\r\n                Body.setInertia(objects[currentObject].body, this.innerHTML);\r\n            }\r\n            else if(objectColumn == 7) {\r\n                Body.setDensity(objects[currentObject].body, this.innerHTML);\r\n            }\r\n            else if(objectColumn == 8) {\r\n                objects[currentObject].body.restitution = this.innerHTML;\r\n            }\r\n            else if(objectColumn == 9) {\r\n                objects[currentObject].body.friction = this.innerHTML;\r\n            }\r\n            else if(objectColumn == 10) {\r\n                objects[currentObject].body.frictionStatic = this.innerHTML;\r\n            }\r\n        });\r\n    }\r\n\r\n\tdocument.getElementById(\"create-box-button\").addEventListener(\"click\", createBox);\r\n\tdocument.getElementById(\"create-circle-button\").addEventListener(\"click\", createCircle);\r\n\tdocument.getElementById(\"create-car-button\").addEventListener(\"click\", createCar);\r\n\r\n    function createBox() {\r\n        var box = new Box(550, 100, 60, 60, {\r\n            friction: 1, \r\n            mass: 15,\r\n            collisionFilter: {\r\n                category: defaultCategory}, \r\n            frictionAir: 0});\r\n        World.add(world, box.body);\r\n        box.body.label += objectNumber;\r\n        objects[objectNumber] = box;\r\n        createRow(box);\r\n    }\r\n\r\n    function createCircle() {\r\n        var circle = new Circle(400, 100, 66, {\r\n        friction: 0.3, \r\n        collisionFilter: {\r\n            category: defaultCategory},\r\n        restitution: 0,\r\n        render: {\r\n            sprite: {\r\n                texture: './img/tempCircle.png'\r\n            }\r\n        },\r\n        frictionAir: 0\r\n        });\r\n        World.add(world, circle.body);\r\n        circle.body.label += objectNumber;\r\n        objects[objectNumber] = circle;\r\n        createRow(circle);\r\n    }\r\n\r\n    function createCar() {\r\n        var car = new Car(500, 100, 200, 40, 35);\r\n        World.add(world, car.body);\r\n    }\r\n}\r\n\r\nfunction friction() {\r\n\r\n}\r\n\r\nfunction pendulum() {\r\n    var cradle = new NewtonCradle(280, 100, 5, 30, 200);\r\n    World.add(world, cradle.body);\r\n}\r\n\r\nfunction wreckingBall() {\r\n    const objects = [];\r\n    var ground = new Box(400, 540, 1200, 60, {label: 'ground', friction: 0, isStatic: true, collisionFilter: {category: transparentCategory}, render: {visible: false}, restitution: 0 });\r\n    World.add(world, ground.body);\r\n    // // Wrecking Ball\r\n    var rows = 10,\r\n        yy = 600 - 21 - 40 * rows;\r\n    \r\n    var stack = Composites.stack(400, yy, 5, rows, 0, 0, function(x, y) {\r\n        return Bodies.rectangle(x, y, 40, 40);\r\n    });\r\n    \r\n    World.add(world, [stack]);\r\n    \r\n    var ball = Bodies.circle(100, 300, 50, { density: 0.04, frictionAir: 0.005});\r\n    \r\n    World.add(world, ball);\r\n    World.add(world, Constraint.create({\r\n        pointA: { x: 300, y: 100 },\r\n        bodyB: ball\r\n    }));\r\n}\r\n\r\nfunction momentum() {\r\n}\r\n\r\nfunction staticEquilibrium() {  \r\n\tvar ground = new Box(400, 540, 1200, 60, {label: 'ground', friction: 0, isStatic: true, collisionFilter: {category: transparentCategory}, render: {visible: false}, restitution: 0 });\r\n\r\n    // Catapult\r\n    var group = Body.nextGroup(true);\r\n\r\n    var stack = Composites.stack(250, 255, 1, 6, 0, 0, function(x, y) {\r\n        return Bodies.rectangle(x, y, 30, 30);\r\n    });\r\n\r\n    var catapult = Bodies.rectangle(400, 470, 320, 20, { collisionFilter: { group: group } });\r\n\r\n    World.add(world, ground.body);\r\n    \r\n    World.add(world, [\r\n        stack,\r\n        catapult,\r\n        // Bodies.rectangle(250, 505, 20, 50, { isStatic: true }),\r\n        Bodies.rectangle(400, 485, 20, 80, { isStatic: true, collisionFilter: { group: group } }),\r\n        Bodies.circle(560, 100, 50, { density: 0.005 }),\r\n        Constraint.create({ \r\n            bodyA: catapult, \r\n            pointB: Vector.clone(catapult.position),\r\n            stiffness: 1,\r\n            length: 0\r\n        })\r\n    ]);\r\n}\r\n\r\nfunction incline() {\r\n    var incline = new Box(250, 400, 800, 30, {\r\n            isStatic: true,\r\n            friction: 0,\r\n            angle: 0.436332\r\n        });\r\n    World.add(world, incline.body);\r\n}"],"sourceRoot":""}